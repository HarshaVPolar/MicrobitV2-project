.syntax unified
.global main
.type main, %function

// --- Constants ---
.equ GPIO_PORT0_BASE,      0x50000000
.equ GPIO_PORT1_BASE,      0x50000300
.equ P0_OUT_OFFSET,        0x504
.equ P0_OUTSET_OFFSET,     0x508
.equ P0_OUTCLR_OFFSET,     0x50C
.equ P0_IN_OFFSET,         0x510
.equ P0_DIR_OFFSET,        0x514
.equ P0_DIRSET_OFFSET,     0x518
.equ P0_PINCNF_OFFSET,     0x700

// Micro:bit Pins for Columns
.equ COL1_PIN, 28  // P0.28
.equ COL2_PIN, 11  // P0.11
.equ COL3_PIN, 31  // P0.31
.equ COL4_PIN, 5   // Port 1, pin 5
.equ COL5_PIN, 30  // P0.30

// Micro:bit Pins for Rows
.equ ROW1_PIN, 21  // P0.21
.equ ROW2_PIN, 22  // P0.22
.equ ROW3_PIN, 15  // P0.15
.equ ROW4_PIN, 24  // P0.24
.equ ROW5_PIN, 19  // P0.19

.equ BUTTON_A_PIN, 14 // P0.14
.equ BUTTON_B_PIN, 23 // P0.23

// Pattern state
.equ MAX_PATTERNS, 3

main:
    push {r4, r5, r6, r7, lr}
    
    bl setup_gpio
    
    // Initialize with pattern 0
    mov r4, #0  // r4 holds the current pattern number
    
main_loop:
    // Check if button A is pressed to switch patterns
    bl is_button_a_pressed
    cmp r0, #1
    bne continue_current_pattern
    
    // Button was pressed, increment pattern counter
    add r4, r4, #1
    cmp r4, #MAX_PATTERNS
    blt continue_pattern_switch
    mov r4, #0  // Reset to first pattern

continue_pattern_switch:
    // Wait for button release to avoid multiple triggers
    bl wait_for_button_release
    
continue_current_pattern:
    // Determine which pattern to display based on r4
    cmp r4, #0
    beq display_pattern0
    cmp r4, #1
    beq display_pattern1
    cmp r4, #2
    beq display_pattern2
    
    // Default fall back to pattern 0
    mov r4, #0
    
display_pattern0:
    bl heart_pattern
    b main_loop
    
display_pattern1:
    bl x_pattern
    b main_loop
    
display_pattern2:
    bl snake_pattern
    b main_loop

.size main, .-main

// --- Setup GPIO ---
setup_gpio:
    push {r4, r5, lr}
    
    // Configure all rows as outputs
    ldr r4, =GPIO_PORT0_BASE
    
    // Row 1
    mov r0, #1
    lsl r0, r0, #ROW1_PIN
    str r0, [r4, #P0_DIRSET_OFFSET]
    
    // Row 2
    mov r0, #1
    lsl r0, r0, #ROW2_PIN
    str r0, [r4, #P0_DIRSET_OFFSET]
    
    // Row 3
    mov r0, #1
    lsl r0, r0, #ROW3_PIN
    str r0, [r4, #P0_DIRSET_OFFSET]
    
    // Row 4
    mov r0, #1
    lsl r0, r0, #ROW4_PIN
    str r0, [r4, #P0_DIRSET_OFFSET]
    
    // Row 5
    mov r0, #1
    lsl r0, r0, #ROW5_PIN
    str r0, [r4, #P0_DIRSET_OFFSET]
    
    // Configure all columns as outputs
    
    // Col 1
    mov r0, #1
    lsl r0, r0, #COL1_PIN
    str r0, [r4, #P0_DIRSET_OFFSET]
    
    // Col 2
    mov r0, #1
    lsl r0, r0, #COL2_PIN
    str r0, [r4, #P0_DIRSET_OFFSET]
    
    // Col 3
    mov r0, #1
    lsl r0, r0, #COL3_PIN
    str r0, [r4, #P0_DIRSET_OFFSET]
    
    // Col 5
    mov r0, #1
    lsl r0, r0, #COL5_PIN
    str r0, [r4, #P0_DIRSET_OFFSET]
    
    // Configure COL4 which is on PORT1
    ldr r4, =GPIO_PORT1_BASE
    mov r0, #1
    lsl r0, r0, #COL4_PIN
    str r0, [r4, #P0_DIRSET_OFFSET]
    
    // Configure Button A as input with pull-up
    ldr r4, =GPIO_PORT0_BASE
    mov r0, #BUTTON_A_PIN
    lsl r0, r0, #2
    add r0, r0, #P0_PINCNF_OFFSET
    mov r1, #0xC // Input, Pull-up
    str r1, [r4, r0]
    
    // Configure Button B as input with pull-up
    mov r0, #BUTTON_B_PIN
    lsl r0, r0, #2
    add r0, r0, #P0_PINCNF_OFFSET
    mov r1, #0xC // Input, Pull-up
    str r1, [r4, r0]
    
    bl clear_all_pixels
    pop {r4, r5, pc}

// --- Button A pressed check ---
is_button_a_pressed:
    ldr r1, =GPIO_PORT0_BASE
    ldr r1, [r1, #P0_IN_OFFSET]
    mov r2, #1
    lsl r2, r2, #BUTTON_A_PIN
    tst r1, r2
    mov r0, #0
    it eq
    moveq r0, #1  // Return 1 if button is pressed (LOW due to pull-up)
    bx lr

// --- Wait for button release ---
wait_for_button_release:
    push {r4, lr}
    
    // Small debounce delay
    ldr r4, =100000
debounce_delay:
    subs r4, r4, #1
    bne debounce_delay
    
    // Check until button is released
button_check_loop:
    bl is_button_a_pressed
    cmp r0, #1
    beq button_check_loop
    
    // Another small delay after release
    ldr r4, =100000
release_delay:
    subs r4, r4, #1
    bne release_delay
    
    pop {r4, pc}

// --- Pattern 1: Heart Pattern ---
heart_pattern:
    push {r4, r5, r6, r7, lr}
    
    // Clear display first
    bl clear_all_pixels
    
    // Drive rows LOW to select them
    ldr r4, =GPIO_PORT0_BASE
    
    // Top of heart (R1C2, R1C4)
    mov r0, #1
    lsl r0, r0, #ROW1_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL2_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    ldr r5, =GPIO_PORT1_BASE
    mov r0, #1
    lsl r0, r0, #COL4_PIN
    str r0, [r5, #P0_OUTSET_OFFSET]
    
    // Middle top row (R2C1, R2C2, R2C3, R2C4, R2C5)
    ldr r4, =GPIO_PORT0_BASE
    mov r0, #1
    lsl r0, r0, #ROW2_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL1_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL2_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL3_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    ldr r5, =GPIO_PORT1_BASE
    mov r0, #1
    lsl r0, r0, #COL4_PIN
    str r0, [r5, #P0_OUTSET_OFFSET]
    
    ldr r4, =GPIO_PORT0_BASE
    mov r0, #1
    lsl r0, r0, #COL5_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    // Middle row (R3C1, R3C2, R3C3, R3C4, R3C5)
    mov r0, #1
    lsl r0, r0, #ROW3_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL1_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL2_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL3_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    ldr r5, =GPIO_PORT1_BASE
    mov r0, #1
    lsl r0, r0, #COL4_PIN
    str r0, [r5, #P0_OUTSET_OFFSET]
    
    ldr r4, =GPIO_PORT0_BASE
    mov r0, #1
    lsl r0, r0, #COL5_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    // Lower middle row (R4C2, R4C3, R4C4)
    mov r0, #1
    lsl r0, r0, #ROW4_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL2_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL3_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    ldr r5, =GPIO_PORT1_BASE
    mov r0, #1
    lsl r0, r0, #COL4_PIN
    str r0, [r5, #P0_OUTSET_OFFSET]
    
    // Bottom row - point of heart (R5C3)
    ldr r4, =GPIO_PORT0_BASE
    mov r0, #1
    lsl r0, r0, #ROW5_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL3_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    // Add delay
    bl medium_delay
    
    pop {r4, r5, r6, r7, pc}

// --- Pattern 2: X Pattern ---
x_pattern:
    push {r4, r5, r6, r7, lr}
    
    // First display diagonal from top-left to bottom-right
    bl clear_all_pixels
    bl display_diagonal_1
    bl medium_delay
    
    // Then display diagonal from top-right to bottom-left
    bl clear_all_pixels
    bl display_diagonal_2
    bl medium_delay
    
    // Then show full X
    bl clear_all_pixels
    bl display_diagonal_1
    bl display_diagonal_2
    bl medium_delay
    
    // Blink all off
    bl clear_all_pixels
    bl medium_delay
    
    pop {r4, r5, r6, r7, pc}

// Display diagonal from top-left to bottom-right
display_diagonal_1:
    push {r4, r5, lr}
    ldr r4, =GPIO_PORT0_BASE
    
    // R1C1
    // Drive ROW1 LOW to enable it
    mov r0, #1
    lsl r0, r0, #ROW1_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    // Drive COL1 HIGH to turn on the LED
    mov r0, #1
    lsl r0, r0, #COL1_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    // R2C2
    // Drive ROW2 LOW to enable it
    mov r0, #1
    lsl r0, r0, #ROW2_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    // Drive COL2 HIGH to turn on the LED
    mov r0, #1
    lsl r0, r0, #COL2_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    // R3C3
    // Drive ROW3 LOW to enable it
    mov r0, #1
    lsl r0, r0, #ROW3_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    // Drive COL3 HIGH to turn on the LED
    mov r0, #1
    lsl r0, r0, #COL3_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    // R4C4
    // Drive ROW4 LOW to enable it
    mov r0, #1
    lsl r0, r0, #ROW4_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    // Set COL4 (which is on PORT1)
    ldr r5, =GPIO_PORT1_BASE
    mov r0, #1
    lsl r0, r0, #COL4_PIN
    str r0, [r5, #P0_OUTSET_OFFSET]
    
    // R5C5
    ldr r4, =GPIO_PORT0_BASE
    // Drive ROW5 LOW to enable it
    mov r0, #1
    lsl r0, r0, #ROW5_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    // Drive COL5 HIGH to turn on the LED
    mov r0, #1
    lsl r0, r0, #COL5_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    pop {r4, r5, pc}

// Display diagonal from top-right to bottom-left
display_diagonal_2:
    push {r4, r5, lr}
    ldr r4, =GPIO_PORT0_BASE
    
    // R1C5
    // Drive ROW1 LOW to enable it
    mov r0, #1
    lsl r0, r0, #ROW1_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    // Drive COL5 HIGH to turn on the LED
    mov r0, #1
    lsl r0, r0, #COL5_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    // R2C4
    // Drive ROW2 LOW to enable it
    mov r0, #1
    lsl r0, r0, #ROW2_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    // Set COL4 (which is on PORT1)
    ldr r5, =GPIO_PORT1_BASE
    mov r0, #1
    lsl r0, r0, #COL4_PIN
    str r0, [r5, #P0_OUTSET_OFFSET]
    
    // R3C3
    // Drive ROW3 LOW to enable it
    ldr r4, =GPIO_PORT0_BASE
    mov r0, #1
    lsl r0, r0, #ROW3_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    // Drive COL3 HIGH to turn on the LED
    mov r0, #1
    lsl r0, r0, #COL3_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    // R4C2
    // Drive ROW4 LOW to enable it
    mov r0, #1
    lsl r0, r0, #ROW4_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    // Drive COL2 HIGH to turn on the LED
    mov r0, #1
    lsl r0, r0, #COL2_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    // R5C1
    // Drive ROW5 LOW to enable it
    mov r0, #1
    lsl r0, r0, #ROW5_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    // Drive COL1 HIGH to turn on the LED
    mov r0, #1
    lsl r0, r0, #COL1_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    pop {r4, r5, pc}

// --- Pattern 3: Snake Pattern ---
snake_pattern:
    push {r4, r5, r6, r7, lr}
    
    // First frame - snake position 1
    bl clear_all_pixels
    bl snake_position1
    bl short_delay
    
    // Second frame - snake position 2
    bl clear_all_pixels
    bl snake_position2
    bl short_delay
    
    // Third frame - snake position 3
    bl clear_all_pixels
    bl snake_position3
    bl short_delay
    
    pop {r4, r5, r6, r7, pc}

// Snake in first position
snake_position1:
    push {r4, r5, lr}
    ldr r4, =GPIO_PORT0_BASE
    
    // Snake body at R3C1, R3C2, R3C3
    mov r0, #1
    lsl r0, r0, #ROW3_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL1_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL2_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL3_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    pop {r4, r5, pc}

// Snake in second position
snake_position2:
    push {r4, r5, lr}
    ldr r4, =GPIO_PORT0_BASE
    
    // Snake body at R3C2, R3C3, R3C4
    mov r0, #1
    lsl r0, r0, #ROW3_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL2_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL3_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    ldr r5, =GPIO_PORT1_BASE
    mov r0, #1
    lsl r0, r0, #COL4_PIN
    str r0, [r5, #P0_OUTSET_OFFSET]
    
    pop {r4, r5, pc}

// Snake in third position
snake_position3:
    push {r4, r5, lr}
    ldr r4, =GPIO_PORT0_BASE
    
    // Snake body at R3C3, R3C4, R3C5
    mov r0, #1
    lsl r0, r0, #ROW3_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL3_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    ldr r5, =GPIO_PORT1_BASE
    mov r0, #1
    lsl r0, r0, #COL4_PIN
    str r0, [r5, #P0_OUTSET_OFFSET]
    
    ldr r4, =GPIO_PORT0_BASE
    mov r0, #1
    lsl r0, r0, #COL5_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    pop {r4, r5, pc}

// Medium delay
medium_delay:
    push {r4, lr}
    ldr r4, =400000
    bl delay_loop
    pop {r4, pc}

// Short delay
short_delay:
    push {r4, lr}
    ldr r4, =200000
    bl delay_loop
    pop {r4, pc}

// Delay loop
delay_loop:
    subs r4, r4, #1
    bne delay_loop
    bx lr

// Clear all pixels by setting all rows HIGH and all columns LOW
clear_all_pixels:
    push {r4, r5, lr}
    
    // Set all rows HIGH (OFF)
    ldr r4, =GPIO_PORT0_BASE
    
    mov r0, #1
    lsl r0, r0, #ROW1_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #ROW2_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #ROW3_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #ROW4_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #ROW5_PIN
    str r0, [r4, #P0_OUTSET_OFFSET]
    
    // Set all columns LOW (OFF)
    mov r0, #1
    lsl r0, r0, #COL1_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL2_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL3_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    
    mov r0, #1
    lsl r0, r0, #COL5_PIN
    str r0, [r4, #P0_OUTCLR_OFFSET]
    
    // Clear COL4 on PORT1
    ldr r5, =GPIO_PORT1_BASE
    mov r0, #1
    lsl r0, r0, #COL4_PIN
    str r0, [r5, #P0_OUTCLR_OFFSET]
    
    pop {r4, r5, pc}
